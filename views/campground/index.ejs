<% layout('layouts/boilerplate') -%>
<script src="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js"></script>
<link
  href="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css"
  rel="stylesheet"
/>

<div class="container-fluid" id="map" style="width: 100%; height: 500px"></div>
<!-- hum chahe to ek common app.js stylesheet bna le jisme sari css likh kr alag alg id bna kr use jaha chahe waha use kre -->

<h1 class="text-center my-5">All Campgrounds</h1>

<%for(let campground of campgrounds){ %>

<div class="card mb-3">
  <div class="row">
    <div class="col-md-4">
      <% if(campground.images.length){ %>
      <img src="<%= campground.images[0].url %>" class="img-fluid" alt="..." />
      <% }else{ %>
      <img
        src="https://res.cloudinary.com/djmubpf63/image/upload/v1625313082/Yelpcamp/rqkeptgigyammpa6m3oj.jpg"
        class="img-fluid"
        alt="..."
      />
      <% } %>
    </div>
    <div class="col-md-8">
      <div class="card-body">
        <h5 class="card-title"><%= campground.title %></h5>
        <p class="card-text"><%= campground.description %></p>
        <small class="text-muted"><%= campground.location %> </small
        ><br /><br />
        <a href="/campgrounds/<%= campground._id %> " class="btn btn-primary"
          >view details</a
        >
      </div>
    </div>
  </div>
</div>

<% } %>

<script>
  const mapboxToken = "<%= process.env.MAPBOX_TOKEN %> ";
  const campgrounds= {features: <%- JSON.stringify(campgrounds) %>};
  mapboxgl.accessToken = mapboxToken;
  var map = new mapboxgl.Map({
    container: "map",
    style: "mapbox://styles/mapbox/light-v10",
    center: [-103.59179687498357, 40.66995747013945],
    zoom: 3,
  });

  map.addControl(new mapboxgl.NavigationControl(),'top-right'); //by default it's also top-right if use don't pass then also it works

  map.on("load", function () {
    // Add a new source from our GeoJSON data and
    // set the 'cluster' option to true. GL-JS will
    // add the point_count property to your source data.
    map.addSource("campgrounds", {
      type: "geojson",
      // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
      // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
      data: campgrounds,
      cluster: true,
      clusterMaxZoom: 14, // Max zoom to cluster points on
      clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)
    });

    map.addLayer({
      id: "clusters",
      type: "circle",
      source: "campgrounds",
      filter: ["has", "point_count"],
      paint: {
        // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
        // with three steps to implement three types of circles:
        //   * Blue, 20px circles when point count is less than 100
        //   * Yellow, 30px circles when point count is between 100 and 750
        //   * Pink, 40px circles when point count is greater than or equal to 750
        "circle-color": [
          "step",
          ["get", "point_count"],
          "#51bbd6",
          10,
          "#5466f0",
          30,
          "#8543e8",
        ],
        "circle-radius": ["step", ["get", "point_count"], 15, 10, 22, 30, 29],
      },
    });

    map.addLayer({
      id: "cluster-count",
      type: "symbol",
      source: "campgrounds",
      filter: ["has", "point_count"],
      layout: {
        "text-field": "{point_count_abbreviated}",
        "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
        "text-size": 12,
      },
    });

    map.addLayer({
      id: "unclustered-point",
      type: "circle",
      source: "campgrounds",
      filter: ["!", ["has", "point_count"]],
      paint: {
        "circle-color": "#11b4da",
        "circle-radius": 4,
        "circle-stroke-width": 1,
        "circle-stroke-color": "#fff",
      },
    });

    // inspect a cluster on click
    map.on("click", "clusters", function (e) {
      var features = map.queryRenderedFeatures(e.point, {
        layers: ["clusters"],
      });
      var clusterId = features[0].properties.cluster_id;
      map
        .getSource("campgrounds")
        .getClusterExpansionZoom(clusterId, function (err, zoom) {
          if (err) return;

          map.easeTo({
            center: features[0].geometry.coordinates,
            zoom: zoom,
          });
        });
    });

    // When a click event occurs on a feature in
    // the unclustered-point layer, open a popup at
    // the location of the feature, with
    // description HTML from its properties.
    map.on("click", "unclustered-point", function (e) {
      const markupText=e.features[0].properties.popUpMarkup;
      var coordinates = e.features[0].geometry.coordinates.slice();


      // Ensure that if the map is zoomed out such that
      // multiple copies of the feature are visible, the
      // popup appears over the copy being pointed to.
      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }

      new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(markupText)
        .addTo(map);
    });

    map.on("mouseenter", "clusters", function () {
      map.getCanvas().style.cursor = "pointer";
    });
    map.on("mouseleave", "clusters", function () {
      map.getCanvas().style.cursor = "";
    });
  });
</script>
